# Makefile.in generated by automake 1.10.2 from Makefile.am.
# libpcsxcore/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



CFLAGS = -march=armv7-a -mcpu=cortex-a8 -mtune=cortex-a8 -mfloat-abi=softfp -mfpu=neon -O3 -ffast-math -ftemplate-depth-36 -fstrict-aliasing -mstructure-size-boundary=32 -falign-functions=32 -falign-loops -falign-labels -falign-jumps -finline -finline-functions -fno-builtin -fno-common -funroll-loops -fstrength-reduce -fpeel-loops -fomit-frame-pointer -fsigned-char -DINLINE="inline" -I. -I./pandora
pkgdatadir = $(datadir)/pcsx
pkglibdir = $(libdir)/pcsx
pkgincludedir = $(includedir)/pcsx
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = arm-none-linux-gnueabi
target_triplet = arm-none-linux-gnueabi
#am__append_1 = \
#	$(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp	\
#	$(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp	\
#	$(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp	\
#	$(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp	\
#	$(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp	\
#	$(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp	\
#	$(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp	\
#	$(top_builddir)/libpcsxcore/

#am__append_2 = \
#	$(top_builddir)/libpcsxcore/ix86/iR3000A.cpp	\
#	$(top_builddir)/libpcsxcore/ix86/ix86.cpp	\
#	$(top_builddir)/libpcsxcore/

#am__append_3 = \
#	$(top_builddir)/libpcsxcore/ppc/pR3000A.cpp	\
#	$(top_builddir)/libpcsxcore/ppc/ppc.cpp	\
#	$(top_builddir)/libpcsxcore/ppc/reguse.cpp	\
#	$(top_builddir)/libpcsxcore/ppc/pasm.s	\
#	$(top_builddir)/libpcsxcore/

subdir = libpcsxcore
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/include/config.h
CONFIG_CLEAN_FILES =
LIBRARIES = $(noinst_LIBRARIES)
ARFLAGS = cru
libpcsxcore_a_AR = $(AR) $(ARFLAGS)
libpcsxcore_a_LIBADD =
am__libpcsxcore_a_SOURCES_DIST =  \
	$(top_builddir)/libpcsxcore/psxbios.cpp \
	$(top_builddir)/libpcsxcore/cdrom.cpp \
	$(top_builddir)/libpcsxcore/psxcounters.cpp \
	$(top_builddir)/libpcsxcore/psxdma.cpp \
	$(top_builddir)/libpcsxcore/disr3000a.cpp \
	$(top_builddir)/libpcsxcore/spu.cpp \
	$(top_builddir)/libpcsxcore/sio.cpp \
	$(top_builddir)/libpcsxcore/psxhw.cpp \
	$(top_builddir)/libpcsxcore/mdec.cpp \
	$(top_builddir)/libpcsxcore/psxmem.cpp \
	$(top_builddir)/libpcsxcore/misc.cpp \
	$(top_builddir)/libpcsxcore/plugins.cpp \
	$(top_builddir)/libpcsxcore/decode_xa.cpp \
	$(top_builddir)/libpcsxcore/R3000A/r3000a.cpp \
	$(top_builddir)/libpcsxcore/psxevents.cpp \
	$(top_builddir)/libpcsxcore/R3000A/psxinterpreter.cpp \
	$(top_builddir)/libpcsxcore/R3000A/gte.cpp \
	$(top_builddir)/libpcsxcore/psxhle.cpp \
	$(top_builddir)/libpcsxcore/cdrom.h \
	$(top_builddir)/libpcsxcore/coff.h \
	$(top_builddir)/libpcsxcore/debug.cpp \
	$(top_builddir)/libpcsxcore/debug.h \
	$(top_builddir)/libpcsxcore/decode_xa.h \
	$(top_builddir)/libpcsxcore/gte.h \
	$(top_builddir)/libpcsxcore/mdec.h \
	$(top_builddir)/libpcsxcore/misc.h \
	$(top_builddir)/libpcsxcore/plugins.h \
	$(top_builddir)/libpcsxcore/psemu_plugin_defs.h \
	$(top_builddir)/libpcsxcore/psxbios.h \
	$(top_builddir)/libpcsxcore/psxcommon.h \
	$(top_builddir)/libpcsxcore/psxcounters.h \
	$(top_builddir)/libpcsxcore/psxdma.h \
	$(top_builddir)/libpcsxcore/psxhle.h \
	$(top_builddir)/libpcsxcore/psxhw.h \
	$(top_builddir)/libpcsxcore/psxmem.h \
	$(top_builddir)/libpcsxcore/r3000a.h \
	$(top_builddir)/libpcsxcore/psxevents.h \
	$(top_builddir)/libpcsxcore/sio.h \
	$(top_builddir)/libpcsxcore/spu.h \
	$(top_builddir)/libpcsxcore/system.h \
	$(top_builddir)/libpcsxcore/cdriso.cpp \
	$(top_builddir)/libpcsxcore/cdriso.h \
	$(top_builddir)/libpcsxcore/cheat.cpp \
	$(top_builddir)/libpcsxcore/cheat.h \
	$(top_builddir)/libpcsxcore/socket.cpp \
	$(top_builddir)/libpcsxcore/socket.h \
	$(top_builddir)/libpcsxcore/gpuAPI/newGPU/newGPU.cpp	      \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/fixed.cpp         \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/core_Command.cpp  \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/core_Dma.cpp      \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/core_Draw.cpp     \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/core_Misc.cpp     \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/raster_Sprite.cpp \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/raster_Poly.cpp   \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/raster_Line.cpp   \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/raster_Image.cpp  \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/inner.cpp         \
  $(top_builddir)/libpcsxcore/pandora/video_blit.S \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/ARM_asm.S \
  $(top_builddir)/libpcsxcore/gpuAPI/gpuAPI.cpp \
  $(top_builddir)/libpcsxcore/R3000A/arm/iR3000A.cpp          \
  $(top_builddir)/libpcsxcore/petespu/stdafx.cpp \
	$(top_builddir)/libpcsxcore/petespu/spu_dma.cpp \
	$(top_builddir)/libpcsxcore/petespu/freeze.cpp \
	$(top_builddir)/libpcsxcore/petespu/alsa.cpp \
	$(top_builddir)/libpcsxcore/petespu/registers.cpp \
	$(top_builddir)/libpcsxcore/petespu/spu.cpp \
	$(top_builddir)/libpcsxcore/pandora/usbjoy.cpp \
	$(top_builddir)/libpcsxcore/pandora/usbjoy_wrapper.cpp \
	$(top_builddir)/libpcsxcore/pandora/minimal.cpp \
	$(top_builddir)/libpcsxcore/LnxMain.cpp 
#am__objects_1 = iR3000A-64.$(OBJEXT) \
#	ix86-64.$(OBJEXT) ix86_cpudetect.$(OBJEXT) \
#	ix86_fpu.$(OBJEXT) ix86_3dnow.$(OBJEXT) \
#	ix86_mmx.$(OBJEXT) ix86_sse.$(OBJEXT)
#am__objects_2 = iR3000A.$(OBJEXT) \
#	ix86.$(OBJEXT)
#am__objects_3 = pR3000A.$(OBJEXT) ppc.$(OBJEXT) \
#	reguse.$(OBJEXT) libpcsxcore_a-pasm.$(OBJEXT)
am_libpcsxcore_a_OBJECTS = psxbios.$(OBJEXT) cdrom.$(OBJEXT) \
	psxcounters.$(OBJEXT) psxdma.$(OBJEXT) disr3000a.$(OBJEXT) \
	spu.$(OBJEXT) sio.$(OBJEXT) psxhw.$(OBJEXT) mdec.$(OBJEXT) \
	psxmem.$(OBJEXT) misc.$(OBJEXT) plugins.$(OBJEXT) \
	decode_xa.$(OBJEXT) r3000a.$(OBJEXT) psxinterpreter.$(OBJEXT) \
	gte.$(OBJEXT) psxhle.$(OBJEXT) debug.$(OBJEXT) psxevents.$(OBJEXT) \
	cdriso.$(OBJEXT) cheat.$(OBJEXT) socket.$(OBJEXT)  \
	gpuAPI/newGPU/newGPU.$(OBJEXT)	      \
  gpuAPI/newGPU/fixed.$(OBJEXT)         \
   gpuAPI/newGPU/core_Command.$(OBJEXT)  \
   gpuAPI/newGPU/core_Dma.$(OBJEXT)      \
   gpuAPI/newGPU/core_Draw.$(OBJEXT)     \
   gpuAPI/newGPU/core_Misc.$(OBJEXT)     \
   gpuAPI/newGPU/raster_Sprite.$(OBJEXT) \
   gpuAPI/newGPU/raster_Poly.$(OBJEXT)   \
  gpuAPI/newGPU/raster_Line.$(OBJEXT)   \
   gpuAPI/newGPU/raster_Image.$(OBJEXT)  \
   gpuAPI/newGPU/inner.$(OBJEXT)         \
   pandora/video_blit.$(OBJEXT) \
   gpuAPI/newGPU/ARM_asm.$(OBJEXT) \
    gpuAPI/gpuAPI.$(OBJEXT) \
    R3000A/arm/iR3000A.$(OBJEXT) \
    petespu/stdafx.$(OBJEXT) \
  	petespu/spu_dma.$(OBJEXT) \
  	petespu/freeze.$(OBJEXT) \
  	petespu/alsa.$(OBJEXT) \
  	petespu/registers.$(OBJEXT) \
  petespu/spu.$(OBJEXT) \
  	pandora/usbjoy.$(OBJEXT) \
  	pandora/usbjoy_wrapper.$(OBJEXT) \
  	pandora/minimal.$(OBJEXT) \
  	LnxMain.$(OBJEXT) \
	$(am__objects_1) $(am__objects_2) $(am__objects_3)
libpcsxcore_a_OBJECTS = $(am_libpcsxcore_a_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(top_builddir)/include
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
CCASCOMPILE = $(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS)
LTCCASCOMPILE = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS)
SOURCES = $(libpcsxcore_a_SOURCES)
DIST_SOURCES = $(am__libpcsxcore_a_SOURCES_DIST)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /media/macosx/psx4all/src/pcsx-revolution-read-only/missing --run aclocal-1.10
ALSA_LIBS = -lasound
AMTAR = ${SHELL} /media/macosx/psx4all/src/pcsx-revolution-read-only/missing --run tar
AR = arm-none-linux-gnueabi-ar
AUTOCONF = ${SHELL} /media/macosx/psx4all/src/pcsx-revolution-read-only/missing --run autoconf
AUTOHEADER = ${SHELL} /media/macosx/psx4all/src/pcsx-revolution-read-only/missing --run autoheader
AUTOMAKE = ${SHELL} /media/macosx/psx4all/src/pcsx-revolution-read-only/missing --run automake-1.10
AWK = gawk
CC = arm-none-linux-gnueabi-g++
CCAS = arm-none-linux-gnueabi-g++
CCASDEPMODE = depmode=gcc3
CCASFLAGS = -g -O2
CCDEPMODE = depmode=gcc3
CPP = arm-none-linux-gnueabi-gcc -E
CPPFLAGS = $(CFLAGS)
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H -DPANDORA -DGP2X -DARM_ARCH -DDATA_PREFIX=\"example/\" -DROM_PREFIX=\"./\" -DDYNAREC -DPSXREC -DNOSOUND
#-DDYNAREC -DPSXREC 
#-DDYNAREC -DPSXREC -DDWITH_HLE -DEMU_LOG=__Log 
DEPDIR = .deps
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GETTEXT_MACRO_VERSION = 0.17
GETTEXT_PACKAGE = pcsx
GLADE2_CFLAGS = 
GLADE2_LIBS = 
GLIB2_CFLAGS = 
GLIB2_LIBS = 
GMSGFMT = :
GMSGFMT_015 = :
GREP = /bin/grep
GTK2_CFLAGS = 
GTK2_LIBS = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INTLLIBS = 
INTL_MACOSX_LIBS = 
LD = /home/me/CodeSourcery/Sourcery_G++_Lite/arm-none-linux-gnueabi/bin/ld
LDFLAGS = -lpthread -lm -ldl -lz -lpnd -lasound 
LIBICONV = -liconv
LIBINTL = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBICONV = -liconv
LTLIBINTL = 
LTLIBOBJS = 
MAINT = #
MAKEINFO = ${SHELL} /media/macosx/psx4all/src/pcsx-revolution-read-only/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
MSGFMT = :
MSGFMT_015 = :
MSGMERGE = :
NASM = 
NM = /home/me/CodeSourcery/Sourcery_G++_Lite/bin//arm-none-linux-gnueabi-nm -B
NMEDIT = 
OBJDUMP = arm-none-linux-gnueabi-objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = pcsx
PACKAGE_BUGREPORT = 
PACKAGE_NAME = pcsx
PACKAGE_STRING = pcsx 1.9
PACKAGE_TARNAME = pcsx
PACKAGE_VERSION = 1.9
PATH_SEPARATOR = :
PEOPSXGL = 
PKG_CONFIG = /usr/bin/pkg-config
POSUB = 
RANLIB = arm-none-linux-gnueabi-ranlib
SDL_CFLAGS = 
SDL_CONFIG = 
SDL_LIBS = 
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/sh
STRIP = arm-none-linux-gnueabi-strip
USE_NLS = no
VERSION = 1.9
XGETTEXT = :
XGETTEXT_015 = :
XGETTEXT_EXTRA_OPTIONS = 
abs_builddir = /media/macosx/psx4all/src/pcsx-revolution-read-only/libpcsxcore
abs_srcdir = /media/macosx/psx4all/src/pcsx-revolution-read-only/libpcsxcore
abs_top_builddir = /media/macosx/psx4all/src/pcsx-revolution-read-only
abs_top_srcdir = /media/macosx/psx4all/src/pcsx-revolution-read-only
ac_ct_CC = 
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = arm-none-linux-gnueabi
host_alias = arm-none-linux-gnueabi
host_cpu = arm
host_os = linux-gnueabi
host_vendor = none
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /media/macosx/psx4all/src/pcsx-revolution-read-only/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = arm-none-linux-gnueabi
target_alias = 
target_cpu = arm
target_os = linux-gnueabi
target_vendor = none
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
INCLUDES = -DLOCALE_DIR=\"${datadir}/locale/\" \
	-I$(top_srcdir)/include

noinst_LIBRARIES = libpcsxcore.a
libpcsxcore_a_SOURCES = $(top_builddir)/libpcsxcore/psxbios.cpp \
	$(top_builddir)/libpcsxcore/cdrom.cpp \
	$(top_builddir)/libpcsxcore/psxcounters.cpp \
	$(top_builddir)/libpcsxcore/psxdma.cpp \
	$(top_builddir)/libpcsxcore/R3000A/disr3000a.cpp \
	$(top_builddir)/libpcsxcore/spu.cpp \
	$(top_builddir)/libpcsxcore/sio.cpp \
	$(top_builddir)/libpcsxcore/psxhw.cpp \
	$(top_builddir)/libpcsxcore/mdec.cpp \
	$(top_builddir)/libpcsxcore/psxmem.cpp \
	$(top_builddir)/libpcsxcore/misc.cpp \
	$(top_builddir)/libpcsxcore/plugins.cpp \
	$(top_builddir)/libpcsxcore/decode_xa.cpp \
	$(top_builddir)/libpcsxcore/R3000A/r3000a.cpp \
	$(top_builddir)/libpcsxcore/psxevents.cpp \
	$(top_builddir)/libpcsxcore/R3000A/psxinterpreter.cpp \
	$(top_builddir)/libpcsxcore/R3000A/gte.cpp \
	$(top_builddir)/libpcsxcore/psxhle.cpp \
	$(top_builddir)/libpcsxcore/cdrom.h \
	$(top_builddir)/libpcsxcore/coff.h \
	$(top_builddir)/libpcsxcore/debug.cpp \
	$(top_builddir)/libpcsxcore/debug.h \
	$(top_builddir)/libpcsxcore/decode_xa.h \
	$(top_builddir)/libpcsxcore/gte.h \
	$(top_builddir)/libpcsxcore/mdec.h \
	$(top_builddir)/libpcsxcore/misc.h \
	$(top_builddir)/libpcsxcore/plugins.h \
	$(top_builddir)/libpcsxcore/psemu_plugin_defs.h \
	$(top_builddir)/libpcsxcore/psxbios.h \
	$(top_builddir)/libpcsxcore/psxcommon.h \
	$(top_builddir)/libpcsxcore/psxcounters.h \
	$(top_builddir)/libpcsxcore/psxdma.h \
	$(top_builddir)/libpcsxcore/psxhle.h \
	$(top_builddir)/libpcsxcore/psxhw.h \
	$(top_builddir)/libpcsxcore/psxmem.h \
	$(top_builddir)/libpcsxcore/r3000a.h \
	$(top_builddir)/libpcsxcore/psxevents.h \
	$(top_builddir)/libpcsxcore/sio.h \
	$(top_builddir)/libpcsxcore/spu.h \
	$(top_builddir)/libpcsxcore/system.h \
	$(top_builddir)/libpcsxcore/cdriso.cpp \
	$(top_builddir)/libpcsxcore/cdriso.h \
	$(top_builddir)/libpcsxcore/cheat.cpp \
	$(top_builddir)/libpcsxcore/cheat.h \
	$(top_builddir)/libpcsxcore/socket.cpp \
	$(top_builddir)/libpcsxcore/socket.h \
	$(top_builddir)/libpcsxcore/gpuAPI/newGPU/newGPU.cpp	      \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/fixed.cpp         \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/core_Command.cpp  \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/core_Dma.cpp      \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/core_Draw.cpp     \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/core_Misc.cpp     \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/raster_Sprite.cpp \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/raster_Poly.cpp   \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/raster_Line.cpp   \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/raster_Image.cpp  \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/inner.cpp         \
  $(top_builddir)/libpcsxcore/pandora/video_blit.S \
  $(top_builddir)/libpcsxcore/gpuAPI/newGPU/ARM_asm.S \
  $(top_builddir)/libpcsxcore/gpuAPI/gpuAPI.cpp \
  $(top_builddir)/libpcsxcore/R3000A/arm/iR3000A.cpp \
  $(top_builddir)/libpcsxcore/petespu/stdafx.cpp \
	$(top_builddir)/libpcsxcore/petespu/spu_dma.cpp \
	$(top_builddir)/libpcsxcore/petespu/freeze.cpp \
	$(top_builddir)/libpcsxcore/petespu/alsa.cpp \
	$(top_builddir)/libpcsxcore/petespu/registers.cpp \
	$(top_builddir)/libpcsxcore/petespu/spu.cpp \
	$(top_builddir)/libpcsxcore/pandora/usbjoy.cpp \
	$(top_builddir)/libpcsxcore/pandora/usbjoy_wrapper.cpp \
	$(top_builddir)/libpcsxcore/pandora/minimal.cpp \
	$(top_builddir)/libpcsxcore/LnxMain.cpp \
	$(am__append_1) \
	$(am__append_2) $(am__append_3)
#libpcsxcore_a_CCASFLAGS = -x assembler-with-cpp -mregnames
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj .s .S 
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  libpcsxcore/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  libpcsxcore/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
libpcsxcore.a: $(libpcsxcore_a_OBJECTS) $(libpcsxcore_a_DEPENDENCIES) 
	$(CCLD) -O3 $(CFLAGS) -o psx4pandora $(libpcsxcore_a_OBJECTS) $(LDFLAGS) 

mostlyclean-compile:
	-find $(top_builddir) -name \*.$(OBJEXT) -exec rm -f {} \;

distclean-compile:
	-rm -f *.tab.cpp

include ./$(DEPDIR)/cdriso.Po
include ./$(DEPDIR)/cdrom.Po
include ./$(DEPDIR)/cheat.Po
include ./$(DEPDIR)/debug.Po
include ./$(DEPDIR)/decode_xa.Po
include ./$(DEPDIR)/disr3000a.Po
include ./$(DEPDIR)/gte.Po
include ./$(DEPDIR)/iR3000A-64.Po
include ./$(DEPDIR)/iR3000A.Po
include ./$(DEPDIR)/ix86-64.Po
include ./$(DEPDIR)/ix86.Po
include ./$(DEPDIR)/ix86_3dnow.Po
include ./$(DEPDIR)/ix86_cpudetect.Po
include ./$(DEPDIR)/ix86_fpu.Po
include ./$(DEPDIR)/ix86_mmx.Po
include ./$(DEPDIR)/ix86_sse.Po
include ./$(DEPDIR)/mdec.Po
include ./$(DEPDIR)/misc.Po
include ./$(DEPDIR)/pR3000A.Po
include ./$(DEPDIR)/plugins.Po
include ./$(DEPDIR)/ppc.Po
include ./$(DEPDIR)/psxbios.Po
include ./$(DEPDIR)/psxcounters.Po
include ./$(DEPDIR)/psxdma.Po
include ./$(DEPDIR)/psxhle.Po
include ./$(DEPDIR)/psxhw.Po
include ./$(DEPDIR)/psxinterpreter.Po
include ./$(DEPDIR)/psxmem.Po
include ./$(DEPDIR)/r3000a.Po
include ./$(DEPDIR)/psxevents.Po
include ./$(DEPDIR)/reguse.Po
include ./$(DEPDIR)/sio.Po
include ./$(DEPDIR)/socket.Po
include ./$(DEPDIR)/spu.Po

.S.o:
	$(COMPILE) -MT $@ -MD -MP -c -o $@ $<
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.S.obj:
	$(COMPILE) -MT $@ -MD -MP -c -o $@ `$(CYGPATH_W) '$<'`
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.S.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -c -o $@ $<
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<


.cpp.o:
	$(COMPILE) -MT $@ -MD -MP -c -o $@ $<
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.cpp.obj:
	$(COMPILE) -MT $@ -MD -MP -c -o $@ `$(CYGPATH_W) '$<'`
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -c -o $@ $<
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

psxbios.o: $(top_builddir)/libpcsxcore/psxbios.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxbios.o -MD -MP -MF $(DEPDIR)/psxbios.Tpo -c -o psxbios.o `test -f '$(top_builddir)/libpcsxcore/psxbios.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxbios.cpp
	mv -f $(DEPDIR)/psxbios.Tpo $(DEPDIR)/psxbios.Po
#	source='$(top_builddir)/libpcsxcore/psxbios.cpp' object='psxbios.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxbios.o `test -f '$(top_builddir)/libpcsxcore/psxbios.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxbios.cpp

psxbios.obj: $(top_builddir)/libpcsxcore/psxbios.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxbios.obj -MD -MP -MF $(DEPDIR)/psxbios.Tpo -c -o psxbios.obj `if test -f '$(top_builddir)/libpcsxcore/psxbios.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxbios.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxbios.cpp'; fi`
	mv -f $(DEPDIR)/psxbios.Tpo $(DEPDIR)/psxbios.Po
#	source='$(top_builddir)/libpcsxcore/psxbios.cpp' object='psxbios.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxbios.obj `if test -f '$(top_builddir)/libpcsxcore/psxbios.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxbios.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxbios.cpp'; fi`

cdrom.o: $(top_builddir)/libpcsxcore/cdrom.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT cdrom.o -MD -MP -MF $(DEPDIR)/cdrom.Tpo -c -o cdrom.o `test -f '$(top_builddir)/libpcsxcore/cdrom.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/cdrom.cpp
	mv -f $(DEPDIR)/cdrom.Tpo $(DEPDIR)/cdrom.Po
#	source='$(top_builddir)/libpcsxcore/cdrom.cpp' object='cdrom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cdrom.o `test -f '$(top_builddir)/libpcsxcore/cdrom.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/cdrom.cpp

cdrom.obj: $(top_builddir)/libpcsxcore/cdrom.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT cdrom.obj -MD -MP -MF $(DEPDIR)/cdrom.Tpo -c -o cdrom.obj `if test -f '$(top_builddir)/libpcsxcore/cdrom.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/cdrom.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/cdrom.cpp'; fi`
	mv -f $(DEPDIR)/cdrom.Tpo $(DEPDIR)/cdrom.Po
#	source='$(top_builddir)/libpcsxcore/cdrom.cpp' object='cdrom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cdrom.obj `if test -f '$(top_builddir)/libpcsxcore/cdrom.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/cdrom.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/cdrom.cpp'; fi`

psxcounters.o: $(top_builddir)/libpcsxcore/psxcounters.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxcounters.o -MD -MP -MF $(DEPDIR)/psxcounters.Tpo -c -o psxcounters.o `test -f '$(top_builddir)/libpcsxcore/psxcounters.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxcounters.cpp
	mv -f $(DEPDIR)/psxcounters.Tpo $(DEPDIR)/psxcounters.Po
#	source='$(top_builddir)/libpcsxcore/psxcounters.cpp' object='psxcounters.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxcounters.o `test -f '$(top_builddir)/libpcsxcore/psxcounters.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxcounters.cpp

psxcounters.obj: $(top_builddir)/libpcsxcore/psxcounters.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxcounters.obj -MD -MP -MF $(DEPDIR)/psxcounters.Tpo -c -o psxcounters.obj `if test -f '$(top_builddir)/libpcsxcore/psxcounters.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxcounters.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxcounters.cpp'; fi`
	mv -f $(DEPDIR)/psxcounters.Tpo $(DEPDIR)/psxcounters.Po
#	source='$(top_builddir)/libpcsxcore/psxcounters.cpp' object='psxcounters.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxcounters.obj `if test -f '$(top_builddir)/libpcsxcore/psxcounters.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxcounters.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxcounters.cpp'; fi`

psxdma.o: $(top_builddir)/libpcsxcore/psxdma.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxdma.o -MD -MP -MF $(DEPDIR)/psxdma.Tpo -c -o psxdma.o `test -f '$(top_builddir)/libpcsxcore/psxdma.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxdma.cpp
	mv -f $(DEPDIR)/psxdma.Tpo $(DEPDIR)/psxdma.Po
#	source='$(top_builddir)/libpcsxcore/psxdma.cpp' object='psxdma.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxdma.o `test -f '$(top_builddir)/libpcsxcore/psxdma.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxdma.cpp

psxdma.obj: $(top_builddir)/libpcsxcore/psxdma.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxdma.obj -MD -MP -MF $(DEPDIR)/psxdma.Tpo -c -o psxdma.obj `if test -f '$(top_builddir)/libpcsxcore/psxdma.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxdma.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxdma.cpp'; fi`
	mv -f $(DEPDIR)/psxdma.Tpo $(DEPDIR)/psxdma.Po
#	source='$(top_builddir)/libpcsxcore/psxdma.cpp' object='psxdma.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxdma.obj `if test -f '$(top_builddir)/libpcsxcore/psxdma.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxdma.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxdma.cpp'; fi`

disr3000a.o: $(top_builddir)/libpcsxcore/R3000A/disr3000a.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT disr3000a.o -MD -MP -MF $(DEPDIR)/disr3000a.Tpo -c -o disr3000a.o `test -f '$(top_builddir)/libpcsxcore/R3000A/disr3000a.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/R3000A/disr3000a.cpp
	mv -f $(DEPDIR)/disr3000a.Tpo $(DEPDIR)/disr3000a.Po
#	source='$(top_builddir)/libpcsxcore/R3000A/disr3000a.cpp' object='disr3000a.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o disr3000a.o `test -f '$(top_builddir)/libpcsxcore/R3000A/disr3000a.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/R3000A/disr3000a.cpp

disr3000a.obj: $(top_builddir)/libpcsxcore/R3000A/disr3000a.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT disr3000a.obj -MD -MP -MF $(DEPDIR)/disr3000a.Tpo -c -o disr3000a.obj `if test -f '$(top_builddir)/libpcsxcore/R3000A/disr3000a.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/R3000A/disr3000a.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/R3000A/disr3000a.cpp'; fi`
	mv -f $(DEPDIR)/disr3000a.Tpo $(DEPDIR)/disr3000a.Po
#	source='$(top_builddir)/libpcsxcore/disr3000a.cpp' object='disr3000a.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o disr3000a.obj `if test -f '$(top_builddir)/libpcsxcore/disr3000a.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/disr3000a.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/disr3000a.cpp'; fi`

spu.o: $(top_builddir)/libpcsxcore/spu.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT spu.o -MD -MP -MF $(DEPDIR)/spu.Tpo -c -o spu.o `test -f '$(top_builddir)/libpcsxcore/spu.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/spu.cpp
	mv -f $(DEPDIR)/spu.Tpo $(DEPDIR)/spu.Po
#	source='$(top_builddir)/libpcsxcore/spu.cpp' object='spu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spu.o `test -f '$(top_builddir)/libpcsxcore/spu.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/spu.cpp

spu.obj: $(top_builddir)/libpcsxcore/spu.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT spu.obj -MD -MP -MF $(DEPDIR)/spu.Tpo -c -o spu.obj `if test -f '$(top_builddir)/libpcsxcore/spu.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/spu.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/spu.cpp'; fi`
	mv -f $(DEPDIR)/spu.Tpo $(DEPDIR)/spu.Po
#	source='$(top_builddir)/libpcsxcore/spu.cpp' object='spu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spu.obj `if test -f '$(top_builddir)/libpcsxcore/spu.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/spu.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/spu.cpp'; fi`

sio.o: $(top_builddir)/libpcsxcore/sio.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT sio.o -MD -MP -MF $(DEPDIR)/sio.Tpo -c -o sio.o `test -f '$(top_builddir)/libpcsxcore/sio.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/sio.cpp
	mv -f $(DEPDIR)/sio.Tpo $(DEPDIR)/sio.Po
#	source='$(top_builddir)/libpcsxcore/sio.cpp' object='sio.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o sio.o `test -f '$(top_builddir)/libpcsxcore/sio.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/sio.cpp

sio.obj: $(top_builddir)/libpcsxcore/sio.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT sio.obj -MD -MP -MF $(DEPDIR)/sio.Tpo -c -o sio.obj `if test -f '$(top_builddir)/libpcsxcore/sio.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/sio.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/sio.cpp'; fi`
	mv -f $(DEPDIR)/sio.Tpo $(DEPDIR)/sio.Po
#	source='$(top_builddir)/libpcsxcore/sio.cpp' object='sio.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o sio.obj `if test -f '$(top_builddir)/libpcsxcore/sio.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/sio.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/sio.cpp'; fi`

psxhw.o: $(top_builddir)/libpcsxcore/psxhw.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxhw.o -MD -MP -MF $(DEPDIR)/psxhw.Tpo -c -o psxhw.o `test -f '$(top_builddir)/libpcsxcore/psxhw.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxhw.cpp
	mv -f $(DEPDIR)/psxhw.Tpo $(DEPDIR)/psxhw.Po
#	source='$(top_builddir)/libpcsxcore/psxhw.cpp' object='psxhw.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxhw.o `test -f '$(top_builddir)/libpcsxcore/psxhw.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxhw.cpp

psxhw.obj: $(top_builddir)/libpcsxcore/psxhw.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxhw.obj -MD -MP -MF $(DEPDIR)/psxhw.Tpo -c -o psxhw.obj `if test -f '$(top_builddir)/libpcsxcore/psxhw.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxhw.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxhw.cpp'; fi`
	mv -f $(DEPDIR)/psxhw.Tpo $(DEPDIR)/psxhw.Po
#	source='$(top_builddir)/libpcsxcore/psxhw.cpp' object='psxhw.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxhw.obj `if test -f '$(top_builddir)/libpcsxcore/psxhw.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxhw.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxhw.cpp'; fi`

mdec.o: $(top_builddir)/libpcsxcore/mdec.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT mdec.o -MD -MP -MF $(DEPDIR)/mdec.Tpo -c -o mdec.o `test -f '$(top_builddir)/libpcsxcore/mdec.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/mdec.cpp
	mv -f $(DEPDIR)/mdec.Tpo $(DEPDIR)/mdec.Po
#	source='$(top_builddir)/libpcsxcore/mdec.cpp' object='mdec.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o mdec.o `test -f '$(top_builddir)/libpcsxcore/mdec.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/mdec.cpp

mdec.obj: $(top_builddir)/libpcsxcore/mdec.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT mdec.obj -MD -MP -MF $(DEPDIR)/mdec.Tpo -c -o mdec.obj `if test -f '$(top_builddir)/libpcsxcore/mdec.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/mdec.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/mdec.cpp'; fi`
	mv -f $(DEPDIR)/mdec.Tpo $(DEPDIR)/mdec.Po
#	source='$(top_builddir)/libpcsxcore/mdec.cpp' object='mdec.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o mdec.obj `if test -f '$(top_builddir)/libpcsxcore/mdec.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/mdec.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/mdec.cpp'; fi`

psxmem.o: $(top_builddir)/libpcsxcore/psxmem.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxmem.o -MD -MP -MF $(DEPDIR)/psxmem.Tpo -c -o psxmem.o `test -f '$(top_builddir)/libpcsxcore/psxmem.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxmem.cpp
	mv -f $(DEPDIR)/psxmem.Tpo $(DEPDIR)/psxmem.Po
#	source='$(top_builddir)/libpcsxcore/psxmem.cpp' object='psxmem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxmem.o `test -f '$(top_builddir)/libpcsxcore/psxmem.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxmem.cpp

psxmem.obj: $(top_builddir)/libpcsxcore/psxmem.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxmem.obj -MD -MP -MF $(DEPDIR)/psxmem.Tpo -c -o psxmem.obj `if test -f '$(top_builddir)/libpcsxcore/psxmem.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxmem.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxmem.cpp'; fi`
	mv -f $(DEPDIR)/psxmem.Tpo $(DEPDIR)/psxmem.Po
#	source='$(top_builddir)/libpcsxcore/psxmem.cpp' object='psxmem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxmem.obj `if test -f '$(top_builddir)/libpcsxcore/psxmem.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxmem.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxmem.cpp'; fi`

misc.o: $(top_builddir)/libpcsxcore/misc.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT misc.o -MD -MP -MF $(DEPDIR)/misc.Tpo -c -o misc.o `test -f '$(top_builddir)/libpcsxcore/misc.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/misc.cpp
	mv -f $(DEPDIR)/misc.Tpo $(DEPDIR)/misc.Po
#	source='$(top_builddir)/libpcsxcore/misc.cpp' object='misc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o misc.o `test -f '$(top_builddir)/libpcsxcore/misc.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/misc.cpp

misc.obj: $(top_builddir)/libpcsxcore/misc.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT misc.obj -MD -MP -MF $(DEPDIR)/misc.Tpo -c -o misc.obj `if test -f '$(top_builddir)/libpcsxcore/misc.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/misc.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/misc.cpp'; fi`
	mv -f $(DEPDIR)/misc.Tpo $(DEPDIR)/misc.Po
#	source='$(top_builddir)/libpcsxcore/misc.cpp' object='misc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o misc.obj `if test -f '$(top_builddir)/libpcsxcore/misc.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/misc.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/misc.cpp'; fi`

plugins.o: $(top_builddir)/libpcsxcore/plugins.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT plugins.o -MD -MP -MF $(DEPDIR)/plugins.Tpo -c -o plugins.o `test -f '$(top_builddir)/libpcsxcore/plugins.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/plugins.cpp
	mv -f $(DEPDIR)/plugins.Tpo $(DEPDIR)/plugins.Po
#	source='$(top_builddir)/libpcsxcore/plugins.cpp' object='plugins.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o plugins.o `test -f '$(top_builddir)/libpcsxcore/plugins.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/plugins.cpp

plugins.obj: $(top_builddir)/libpcsxcore/plugins.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT plugins.obj -MD -MP -MF $(DEPDIR)/plugins.Tpo -c -o plugins.obj `if test -f '$(top_builddir)/libpcsxcore/plugins.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/plugins.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/plugins.cpp'; fi`
	mv -f $(DEPDIR)/plugins.Tpo $(DEPDIR)/plugins.Po
#	source='$(top_builddir)/libpcsxcore/plugins.cpp' object='plugins.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o plugins.obj `if test -f '$(top_builddir)/libpcsxcore/plugins.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/plugins.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/plugins.cpp'; fi`

decode_xa.o: $(top_builddir)/libpcsxcore/decode_xa.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT decode_xa.o -MD -MP -MF $(DEPDIR)/decode_xa.Tpo -c -o decode_xa.o `test -f '$(top_builddir)/libpcsxcore/decode_xa.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/decode_xa.cpp
	mv -f $(DEPDIR)/decode_xa.Tpo $(DEPDIR)/decode_xa.Po
#	source='$(top_builddir)/libpcsxcore/decode_xa.cpp' object='decode_xa.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o decode_xa.o `test -f '$(top_builddir)/libpcsxcore/decode_xa.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/decode_xa.cpp

decode_xa.obj: $(top_builddir)/libpcsxcore/decode_xa.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT decode_xa.obj -MD -MP -MF $(DEPDIR)/decode_xa.Tpo -c -o decode_xa.obj `if test -f '$(top_builddir)/libpcsxcore/decode_xa.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/decode_xa.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/decode_xa.cpp'; fi`
	mv -f $(DEPDIR)/decode_xa.Tpo $(DEPDIR)/decode_xa.Po
#	source='$(top_builddir)/libpcsxcore/decode_xa.cpp' object='decode_xa.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o decode_xa.obj `if test -f '$(top_builddir)/libpcsxcore/decode_xa.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/decode_xa.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/decode_xa.cpp'; fi`

r3000a.o: $(top_builddir)/libpcsxcore/R3000A/r3000a.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT r3000a.o -MD -MP -MF $(DEPDIR)/r3000a.Tpo -c -o r3000a.o `test -f '$(top_builddir)/libpcsxcore/R3000A/r3000a.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/R3000A/r3000a.cpp
	mv -f $(DEPDIR)/r3000a.Tpo $(DEPDIR)/r3000a.Po
#	source='$(top_builddir)/libpcsxcore/r3000a.cpp' object='r3000a.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o r3000a.o `test -f '$(top_builddir)/libpcsxcore/r3000a.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/r3000a.cpp

r3000a.obj: $(top_builddir)/libpcsxcore/R3000A/r3000a.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT r3000a.obj -MD -MP -MF $(DEPDIR)/r3000a.Tpo -c -o r3000a.obj `if test -f '$(top_builddir)/libpcsxcore/R3000A/r3000a.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/R3000A/r3000a.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/R3000A/r3000a.cpp'; fi`
	mv -f $(DEPDIR)/r3000a.Tpo $(DEPDIR)/r3000a.Po
#	source='$(top_builddir)/libpcsxcore/r3000a.cpp' object='r3000a.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o r3000a.obj `if test -f '$(top_builddir)/libpcsxcore/r3000a.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/r3000a.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/r3000a.cpp'; fi`

psxevents.o: $(top_builddir)/libpcsxcore/psxevents.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxevents.o -MD -MP -MF $(DEPDIR)/psxevents.Tpo -c -o psxevents.o `test -f '$(top_builddir)/libpcsxcore/psxevents.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxevents.cpp
	mv -f $(DEPDIR)/psxevents.Tpo $(DEPDIR)/psxevents.Po
#	source='$(top_builddir)/libpcsxcore/psxevents.cpp' object='psxevents.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxevents.o `test -f '$(top_builddir)/libpcsxcore/psxevents.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxevents.cpp

psxevents.obj: $(top_builddir)/libpcsxcore/psxevents.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxevents.obj -MD -MP -MF $(DEPDIR)/psxevents.Tpo -c -o psxevents.obj `if test -f '$(top_builddir)/libpcsxcore/psxevents.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxevents.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxevents.cpp'; fi`
	mv -f $(DEPDIR)/psxevents.Tpo $(DEPDIR)/psxevents.Po
#	source='$(top_builddir)/libpcsxcore/psxevents.cpp' object='psxevents.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxevents.obj `if test -f '$(top_builddir)/libpcsxcore/psxevents.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxevents.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxevents.cpp'; fi`

psxinterpreter.o: $(top_builddir)/libpcsxcore/R3000A/psxinterpreter.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxinterpreter.o -MD -MP -MF $(DEPDIR)/psxinterpreter.Tpo -c -o psxinterpreter.o `test -f '$(top_builddir)/libpcsxcore/R3000A/psxinterpreter.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/R3000A/psxinterpreter.cpp
	mv -f $(DEPDIR)/psxinterpreter.Tpo $(DEPDIR)/psxinterpreter.Po
#	source='$(top_builddir)/libpcsxcore/psxinterpreter.cpp' object='psxinterpreter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxinterpreter.o `test -f '$(top_builddir)/libpcsxcore/psxinterpreter.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxinterpreter.cpp

psxinterpreter.obj: $(top_builddir)/libpcsxcore/R3000A/psxinterpreter.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxinterpreter.obj -MD -MP -MF $(DEPDIR)/psxinterpreter.Tpo -c -o psxinterpreter.obj `if test -f '$(top_builddir)/libpcsxcore/R3000A/psxinterpreter.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/R3000A/psxinterpreter.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/R3000A/psxinterpreter.cpp'; fi`
	mv -f $(DEPDIR)/psxinterpreter.Tpo $(DEPDIR)/psxinterpreter.Po
#	source='$(top_builddir)/libpcsxcore/psxinterpreter.cpp' object='psxinterpreter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxinterpreter.obj `if test -f '$(top_builddir)/libpcsxcore/psxinterpreter.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxinterpreter.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxinterpreter.cpp'; fi`

gte.o: $(top_builddir)/libpcsxcore/R3000A/gte.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT gte.o -MD -MP -MF $(DEPDIR)/gte.Tpo -c -o gte.o `test -f '$(top_builddir)/libpcsxcore/R3000A/gte.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/R3000A/gte.cpp
	mv -f $(DEPDIR)/gte.Tpo $(DEPDIR)/gte.Po
#	source='$(top_builddir)/libpcsxcore/R3000A/gte.cpp' object='gte.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o gte.o `test -f '$(top_builddir)/libpcsxcore/R3000A/gte.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/R3000A/gte.cpp

gte.obj: $(top_builddir)/libpcsxcore/R3000A/gte.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT gte.obj -MD -MP -MF $(DEPDIR)/gte.Tpo -c -o gte.obj `if test -f '$(top_builddir)/libpcsxcore/R3000A/gte.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/R3000A/gte.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/R3000A/gte.cpp'; fi`
	mv -f $(DEPDIR)/gte.Tpo $(DEPDIR)/gte.Po
#	source='$(top_builddir)/libpcsxcore/gte.cpp' object='gte.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o gte.obj `if test -f '$(top_builddir)/libpcsxcore/gte.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/gte.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/gte.cpp'; fi`

psxhle.o: $(top_builddir)/libpcsxcore/psxhle.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxhle.o -MD -MP -MF $(DEPDIR)/psxhle.Tpo -c -o psxhle.o `test -f '$(top_builddir)/libpcsxcore/psxhle.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxhle.cpp
	mv -f $(DEPDIR)/psxhle.Tpo $(DEPDIR)/psxhle.Po
#	source='$(top_builddir)/libpcsxcore/psxhle.cpp' object='psxhle.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxhle.o `test -f '$(top_builddir)/libpcsxcore/psxhle.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/psxhle.cpp

psxhle.obj: $(top_builddir)/libpcsxcore/psxhle.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT psxhle.obj -MD -MP -MF $(DEPDIR)/psxhle.Tpo -c -o psxhle.obj `if test -f '$(top_builddir)/libpcsxcore/psxhle.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxhle.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxhle.cpp'; fi`
	mv -f $(DEPDIR)/psxhle.Tpo $(DEPDIR)/psxhle.Po
#	source='$(top_builddir)/libpcsxcore/psxhle.cpp' object='psxhle.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o psxhle.obj `if test -f '$(top_builddir)/libpcsxcore/psxhle.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/psxhle.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/psxhle.cpp'; fi`

debug.o: $(top_builddir)/libpcsxcore/debug.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT debug.o -MD -MP -MF $(DEPDIR)/debug.Tpo -c -o debug.o `test -f '$(top_builddir)/libpcsxcore/debug.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/debug.cpp
	mv -f $(DEPDIR)/debug.Tpo $(DEPDIR)/debug.Po
#	source='$(top_builddir)/libpcsxcore/debug.cpp' object='debug.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o debug.o `test -f '$(top_builddir)/libpcsxcore/debug.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/debug.cpp

debug.obj: $(top_builddir)/libpcsxcore/debug.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT debug.obj -MD -MP -MF $(DEPDIR)/debug.Tpo -c -o debug.obj `if test -f '$(top_builddir)/libpcsxcore/debug.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/debug.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/debug.cpp'; fi`
	mv -f $(DEPDIR)/debug.Tpo $(DEPDIR)/debug.Po
#	source='$(top_builddir)/libpcsxcore/debug.cpp' object='debug.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o debug.obj `if test -f '$(top_builddir)/libpcsxcore/debug.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/debug.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/debug.cpp'; fi`

cdriso.o: $(top_builddir)/libpcsxcore/cdriso.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT cdriso.o -MD -MP -MF $(DEPDIR)/cdriso.Tpo -c -o cdriso.o `test -f '$(top_builddir)/libpcsxcore/cdriso.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/cdriso.cpp
	mv -f $(DEPDIR)/cdriso.Tpo $(DEPDIR)/cdriso.Po
#	source='$(top_builddir)/libpcsxcore/cdriso.cpp' object='cdriso.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cdriso.o `test -f '$(top_builddir)/libpcsxcore/cdriso.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/cdriso.cpp

cdriso.obj: $(top_builddir)/libpcsxcore/cdriso.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT cdriso.obj -MD -MP -MF $(DEPDIR)/cdriso.Tpo -c -o cdriso.obj `if test -f '$(top_builddir)/libpcsxcore/cdriso.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/cdriso.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/cdriso.cpp'; fi`
	mv -f $(DEPDIR)/cdriso.Tpo $(DEPDIR)/cdriso.Po
#	source='$(top_builddir)/libpcsxcore/cdriso.cpp' object='cdriso.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cdriso.obj `if test -f '$(top_builddir)/libpcsxcore/cdriso.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/cdriso.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/cdriso.cpp'; fi`

cheat.o: $(top_builddir)/libpcsxcore/cheat.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT cheat.o -MD -MP -MF $(DEPDIR)/cheat.Tpo -c -o cheat.o `test -f '$(top_builddir)/libpcsxcore/cheat.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/cheat.cpp
	mv -f $(DEPDIR)/cheat.Tpo $(DEPDIR)/cheat.Po
#	source='$(top_builddir)/libpcsxcore/cheat.cpp' object='cheat.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cheat.o `test -f '$(top_builddir)/libpcsxcore/cheat.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/cheat.cpp

cheat.obj: $(top_builddir)/libpcsxcore/cheat.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT cheat.obj -MD -MP -MF $(DEPDIR)/cheat.Tpo -c -o cheat.obj `if test -f '$(top_builddir)/libpcsxcore/cheat.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/cheat.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/cheat.cpp'; fi`
	mv -f $(DEPDIR)/cheat.Tpo $(DEPDIR)/cheat.Po
#	source='$(top_builddir)/libpcsxcore/cheat.cpp' object='cheat.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cheat.obj `if test -f '$(top_builddir)/libpcsxcore/cheat.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/cheat.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/cheat.cpp'; fi`

socket.o: $(top_builddir)/libpcsxcore/socket.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT socket.o -MD -MP -MF $(DEPDIR)/socket.Tpo -c -o socket.o `test -f '$(top_builddir)/libpcsxcore/socket.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/socket.cpp
	mv -f $(DEPDIR)/socket.Tpo $(DEPDIR)/socket.Po
#	source='$(top_builddir)/libpcsxcore/socket.cpp' object='socket.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o socket.o `test -f '$(top_builddir)/libpcsxcore/socket.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/socket.cpp

socket.obj: $(top_builddir)/libpcsxcore/socket.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT socket.obj -MD -MP -MF $(DEPDIR)/socket.Tpo -c -o socket.obj `if test -f '$(top_builddir)/libpcsxcore/socket.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/socket.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/socket.cpp'; fi`
	mv -f $(DEPDIR)/socket.Tpo $(DEPDIR)/socket.Po
#	source='$(top_builddir)/libpcsxcore/socket.cpp' object='socket.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o socket.obj `if test -f '$(top_builddir)/libpcsxcore/socket.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/socket.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/socket.cpp'; fi`

iR3000A-64.o: $(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT iR3000A-64.o -MD -MP -MF $(DEPDIR)/iR3000A-64.Tpo -c -o iR3000A-64.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp
	mv -f $(DEPDIR)/iR3000A-64.Tpo $(DEPDIR)/iR3000A-64.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp' object='iR3000A-64.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o iR3000A-64.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp

iR3000A-64.obj: $(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT iR3000A-64.obj -MD -MP -MF $(DEPDIR)/iR3000A-64.Tpo -c -o iR3000A-64.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp'; fi`
	mv -f $(DEPDIR)/iR3000A-64.Tpo $(DEPDIR)/iR3000A-64.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp' object='iR3000A-64.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o iR3000A-64.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/iR3000A-64.cpp'; fi`

ix86-64.o: $(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86-64.o -MD -MP -MF $(DEPDIR)/ix86-64.Tpo -c -o ix86-64.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp
	mv -f $(DEPDIR)/ix86-64.Tpo $(DEPDIR)/ix86-64.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp' object='ix86-64.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86-64.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp

ix86-64.obj: $(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86-64.obj -MD -MP -MF $(DEPDIR)/ix86-64.Tpo -c -o ix86-64.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp'; fi`
	mv -f $(DEPDIR)/ix86-64.Tpo $(DEPDIR)/ix86-64.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp' object='ix86-64.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86-64.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/ix86-64.cpp'; fi`

ix86_cpudetect.o: $(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86_cpudetect.o -MD -MP -MF $(DEPDIR)/ix86_cpudetect.Tpo -c -o ix86_cpudetect.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp
	mv -f $(DEPDIR)/ix86_cpudetect.Tpo $(DEPDIR)/ix86_cpudetect.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp' object='ix86_cpudetect.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86_cpudetect.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp

ix86_cpudetect.obj: $(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86_cpudetect.obj -MD -MP -MF $(DEPDIR)/ix86_cpudetect.Tpo -c -o ix86_cpudetect.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp'; fi`
	mv -f $(DEPDIR)/ix86_cpudetect.Tpo $(DEPDIR)/ix86_cpudetect.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp' object='ix86_cpudetect.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86_cpudetect.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/ix86_cpudetect.cpp'; fi`

ix86_fpu.o: $(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86_fpu.o -MD -MP -MF $(DEPDIR)/ix86_fpu.Tpo -c -o ix86_fpu.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp
	mv -f $(DEPDIR)/ix86_fpu.Tpo $(DEPDIR)/ix86_fpu.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp' object='ix86_fpu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86_fpu.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp

ix86_fpu.obj: $(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86_fpu.obj -MD -MP -MF $(DEPDIR)/ix86_fpu.Tpo -c -o ix86_fpu.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp'; fi`
	mv -f $(DEPDIR)/ix86_fpu.Tpo $(DEPDIR)/ix86_fpu.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp' object='ix86_fpu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86_fpu.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/ix86_fpu.cpp'; fi`

ix86_3dnow.o: $(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86_3dnow.o -MD -MP -MF $(DEPDIR)/ix86_3dnow.Tpo -c -o ix86_3dnow.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp
	mv -f $(DEPDIR)/ix86_3dnow.Tpo $(DEPDIR)/ix86_3dnow.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp' object='ix86_3dnow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86_3dnow.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp

ix86_3dnow.obj: $(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86_3dnow.obj -MD -MP -MF $(DEPDIR)/ix86_3dnow.Tpo -c -o ix86_3dnow.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp'; fi`
	mv -f $(DEPDIR)/ix86_3dnow.Tpo $(DEPDIR)/ix86_3dnow.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp' object='ix86_3dnow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86_3dnow.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/ix86_3dnow.cpp'; fi`

ix86_mmx.o: $(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86_mmx.o -MD -MP -MF $(DEPDIR)/ix86_mmx.Tpo -c -o ix86_mmx.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp
	mv -f $(DEPDIR)/ix86_mmx.Tpo $(DEPDIR)/ix86_mmx.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp' object='ix86_mmx.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86_mmx.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp

ix86_mmx.obj: $(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86_mmx.obj -MD -MP -MF $(DEPDIR)/ix86_mmx.Tpo -c -o ix86_mmx.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp'; fi`
	mv -f $(DEPDIR)/ix86_mmx.Tpo $(DEPDIR)/ix86_mmx.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp' object='ix86_mmx.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86_mmx.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/ix86_mmx.cpp'; fi`

ix86_sse.o: $(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86_sse.o -MD -MP -MF $(DEPDIR)/ix86_sse.Tpo -c -o ix86_sse.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp
	mv -f $(DEPDIR)/ix86_sse.Tpo $(DEPDIR)/ix86_sse.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp' object='ix86_sse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86_sse.o `test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp

ix86_sse.obj: $(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86_sse.obj -MD -MP -MF $(DEPDIR)/ix86_sse.Tpo -c -o ix86_sse.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp'; fi`
	mv -f $(DEPDIR)/ix86_sse.Tpo $(DEPDIR)/ix86_sse.Po
#	source='$(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp' object='ix86_sse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86_sse.obj `if test -f '$(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86_64/ix86_sse.cpp'; fi`

iR3000A.o: $(top_builddir)/libpcsxcore/ix86/iR3000A.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT iR3000A.o -MD -MP -MF $(DEPDIR)/iR3000A.Tpo -c -o iR3000A.o `test -f '$(top_builddir)/libpcsxcore/ix86/iR3000A.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86/iR3000A.cpp
	mv -f $(DEPDIR)/iR3000A.Tpo $(DEPDIR)/iR3000A.Po
#	source='$(top_builddir)/libpcsxcore/ix86/iR3000A.cpp' object='iR3000A.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o iR3000A.o `test -f '$(top_builddir)/libpcsxcore/ix86/iR3000A.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86/iR3000A.cpp

iR3000A.obj: $(top_builddir)/libpcsxcore/ix86/iR3000A.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT iR3000A.obj -MD -MP -MF $(DEPDIR)/iR3000A.Tpo -c -o iR3000A.obj `if test -f '$(top_builddir)/libpcsxcore/ix86/iR3000A.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86/iR3000A.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86/iR3000A.cpp'; fi`
	mv -f $(DEPDIR)/iR3000A.Tpo $(DEPDIR)/iR3000A.Po
#	source='$(top_builddir)/libpcsxcore/ix86/iR3000A.cpp' object='iR3000A.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o iR3000A.obj `if test -f '$(top_builddir)/libpcsxcore/ix86/iR3000A.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86/iR3000A.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86/iR3000A.cpp'; fi`

ix86.o: $(top_builddir)/libpcsxcore/ix86/ix86.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86.o -MD -MP -MF $(DEPDIR)/ix86.Tpo -c -o ix86.o `test -f '$(top_builddir)/libpcsxcore/ix86/ix86.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86/ix86.cpp
	mv -f $(DEPDIR)/ix86.Tpo $(DEPDIR)/ix86.Po
#	source='$(top_builddir)/libpcsxcore/ix86/ix86.cpp' object='ix86.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86.o `test -f '$(top_builddir)/libpcsxcore/ix86/ix86.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ix86/ix86.cpp

ix86.obj: $(top_builddir)/libpcsxcore/ix86/ix86.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ix86.obj -MD -MP -MF $(DEPDIR)/ix86.Tpo -c -o ix86.obj `if test -f '$(top_builddir)/libpcsxcore/ix86/ix86.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86/ix86.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86/ix86.cpp'; fi`
	mv -f $(DEPDIR)/ix86.Tpo $(DEPDIR)/ix86.Po
#	source='$(top_builddir)/libpcsxcore/ix86/ix86.cpp' object='ix86.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ix86.obj `if test -f '$(top_builddir)/libpcsxcore/ix86/ix86.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ix86/ix86.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ix86/ix86.cpp'; fi`

pR3000A.o: $(top_builddir)/libpcsxcore/ppc/pR3000A.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pR3000A.o -MD -MP -MF $(DEPDIR)/pR3000A.Tpo -c -o pR3000A.o `test -f '$(top_builddir)/libpcsxcore/ppc/pR3000A.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ppc/pR3000A.cpp
	mv -f $(DEPDIR)/pR3000A.Tpo $(DEPDIR)/pR3000A.Po
#	source='$(top_builddir)/libpcsxcore/ppc/pR3000A.cpp' object='pR3000A.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pR3000A.o `test -f '$(top_builddir)/libpcsxcore/ppc/pR3000A.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ppc/pR3000A.cpp

pR3000A.obj: $(top_builddir)/libpcsxcore/ppc/pR3000A.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pR3000A.obj -MD -MP -MF $(DEPDIR)/pR3000A.Tpo -c -o pR3000A.obj `if test -f '$(top_builddir)/libpcsxcore/ppc/pR3000A.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ppc/pR3000A.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ppc/pR3000A.cpp'; fi`
	mv -f $(DEPDIR)/pR3000A.Tpo $(DEPDIR)/pR3000A.Po
#	source='$(top_builddir)/libpcsxcore/ppc/pR3000A.cpp' object='pR3000A.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pR3000A.obj `if test -f '$(top_builddir)/libpcsxcore/ppc/pR3000A.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ppc/pR3000A.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ppc/pR3000A.cpp'; fi`

ppc.o: $(top_builddir)/libpcsxcore/ppc/ppc.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ppc.o -MD -MP -MF $(DEPDIR)/ppc.Tpo -c -o ppc.o `test -f '$(top_builddir)/libpcsxcore/ppc/ppc.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ppc/ppc.cpp
	mv -f $(DEPDIR)/ppc.Tpo $(DEPDIR)/ppc.Po
#	source='$(top_builddir)/libpcsxcore/ppc/ppc.cpp' object='ppc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ppc.o `test -f '$(top_builddir)/libpcsxcore/ppc/ppc.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ppc/ppc.cpp

ppc.obj: $(top_builddir)/libpcsxcore/ppc/ppc.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ppc.obj -MD -MP -MF $(DEPDIR)/ppc.Tpo -c -o ppc.obj `if test -f '$(top_builddir)/libpcsxcore/ppc/ppc.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ppc/ppc.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ppc/ppc.cpp'; fi`
	mv -f $(DEPDIR)/ppc.Tpo $(DEPDIR)/ppc.Po
#	source='$(top_builddir)/libpcsxcore/ppc/ppc.cpp' object='ppc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ppc.obj `if test -f '$(top_builddir)/libpcsxcore/ppc/ppc.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ppc/ppc.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ppc/ppc.cpp'; fi`

reguse.o: $(top_builddir)/libpcsxcore/ppc/reguse.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT reguse.o -MD -MP -MF $(DEPDIR)/reguse.Tpo -c -o reguse.o `test -f '$(top_builddir)/libpcsxcore/ppc/reguse.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ppc/reguse.cpp
	mv -f $(DEPDIR)/reguse.Tpo $(DEPDIR)/reguse.Po
#	source='$(top_builddir)/libpcsxcore/ppc/reguse.cpp' object='reguse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o reguse.o `test -f '$(top_builddir)/libpcsxcore/ppc/reguse.cpp' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ppc/reguse.cpp

reguse.obj: $(top_builddir)/libpcsxcore/ppc/reguse.cpp
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT reguse.obj -MD -MP -MF $(DEPDIR)/reguse.Tpo -c -o reguse.obj `if test -f '$(top_builddir)/libpcsxcore/ppc/reguse.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ppc/reguse.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ppc/reguse.cpp'; fi`
	mv -f $(DEPDIR)/reguse.Tpo $(DEPDIR)/reguse.Po
#	source='$(top_builddir)/libpcsxcore/ppc/reguse.cpp' object='reguse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o reguse.obj `if test -f '$(top_builddir)/libpcsxcore/ppc/reguse.cpp'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ppc/reguse.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ppc/reguse.cpp'; fi`

.s.o:
	$(CCASCOMPILE) -c -o $@ $<

.s.obj:
	$(CCASCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.s.lo:
	$(LTCCASCOMPILE) -c -o $@ $<

libpcsxcore_a-pasm.o: $(top_builddir)/libpcsxcore/ppc/pasm.s
	$(CCAS) $(libpcsxcore_a_CCASFLAGS) $(CCASFLAGS) -c -o libpcsxcore_a-pasm.o `test -f '$(top_builddir)/libpcsxcore/ppc/pasm.s' || echo '$(srcdir)/'`$(top_builddir)/libpcsxcore/ppc/pasm.s

libpcsxcore_a-pasm.obj: $(top_builddir)/libpcsxcore/ppc/pasm.s
	$(CCAS) $(libpcsxcore_a_CCASFLAGS) $(CCASFLAGS) -c -o libpcsxcore_a-pasm.obj `if test -f '$(top_builddir)/libpcsxcore/ppc/pasm.s'; then $(CYGPATH_W) '$(top_builddir)/libpcsxcore/ppc/pasm.s'; else $(CYGPATH_W) '$(srcdir)/$(top_builddir)/libpcsxcore/ppc/pasm.s'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-noinstLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am:

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstLIBRARIES ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
